diff --git a/src/hardware/korad-kaxxxxp/api.c b/src/hardware/korad-kaxxxxp/api.c
index c6b9b1f6..30d5d36a 100644
--- a/src/hardware/korad-kaxxxxp/api.c
+++ b/src/hardware/korad-kaxxxxp/api.c
@@ -76,6 +76,8 @@ static const struct korad_kaxxxxp_model models[] = {
 	{"Tenma", "72-2710", "", 1, volts_30, amps_5, 0},
 	{"Velleman", "LABPS3005D", "", 1, volts_30, amps_5,
 		KORAD_QUIRK_LABPS_OVP_EN},
+	{"Velleman", "LABPS3005DN", "QJE3005PV1.0", 1, volts_30, amps_5,
+		KORAD_QUIRK_VELLEMAN},
 	{"Velleman", "PS3005D V1.3", "VELLEMANPS3005DV1.3" , 1, volts_30, amps_5,
 		KORAD_QUIRK_ID_TRAILING | KORAD_QUIRK_SLOW_PROCESSING},
 	{"Velleman", "PS3005D", "", 1, volts_30, amps_5, 0},
@@ -282,7 +284,10 @@ static GSList *scan(struct sr_dev_driver *di, GSList *options)
 
 	// TODO: check if adding the newline breaks some other devices - I cannot do so
 	// This is required for the KA3005PS
-	ret = korad_kaxxxxp_send_cmd(serial, "*IDN?", true);
+	// TODO: check if adding the \\n breaks some other devices - I cannot do so
+	// This is required for the Velleman LABPS3005DN
+	// It does not break the KA3005PS
+	ret = korad_kaxxxxp_send_cmd(serial, "*IDN?", false, true);
 	if (ret < 0)
 		return NULL;
 
@@ -290,6 +295,7 @@ static GSList *scan(struct sr_dev_driver *di, GSList *options)
 	ret = korad_kaxxxxp_read_chars(serial, len, reply, true);
 	if (ret < 0)
 		return NULL;
+
 	sr_dbg("Received: %d, %s", ret, reply);
 
 	/*
diff --git a/src/hardware/korad-kaxxxxp/protocol.c b/src/hardware/korad-kaxxxxp/protocol.c
index 0ce7206e..76672e4c 100644
--- a/src/hardware/korad-kaxxxxp/protocol.c
+++ b/src/hardware/korad-kaxxxxp/protocol.c
@@ -25,18 +25,22 @@
 #define EXTRA_PROCESSING_TIME_MS  450
 
 SR_PRIV int korad_kaxxxxp_send_cmd(struct sr_serial_dev_inst *serial,
-	const char *cmd, bool add_newline)
+	const char *cmd, bool add_newline, bool velleman_literal)
 {
 	int ret;
 
 	char* addition = "";
-	if (add_newline)
+	if (add_newline && velleman_literal)
+		addition = "\\n\n";
+	else if (add_newline)
 		addition = "\n";
+	else if (velleman_literal)
+		addition = "\\n"; // Very weird one
 
-	// 21 was chosen here because 20 is chosen in korad_kaxxxxp_set_value
-	char newcmd[21];
-	ret = sr_snprintf_ascii(newcmd, 21, "%s%s", cmd, addition);
-	if (ret < 0 || ret >= 21) {
+	// 23 was chosen here because 20 is chosen in korad_kaxxxxp_set_value
+	char newcmd[23];
+	ret = sr_snprintf_ascii(newcmd, sizeof(newcmd), "%s%s", cmd, addition);
+	if (ret < 0 || ret >= (int) sizeof(newcmd)) {
 		sr_err("Error creating command: %d.", ret);
 		if (ret > 0)
 			ret = -ret; // make errors always return negative numbers
@@ -229,8 +233,13 @@ SR_PRIV int korad_kaxxxxp_set_value(struct sr_serial_dev_inst *serial,
 			"VSET1:%05.2f", devc->set_voltage_target);
 		break;
 	case KAXXXXP_OUTPUT:
-		sr_snprintf_ascii(msg, sizeof(msg),
-			"OUT%1d", (devc->set_output_enabled) ? 1 : 0);
+		if (devc->model->quirks & KORAD_QUIRK_VELLEMAN) {
+			sr_snprintf_ascii(msg, sizeof(msg),
+				"OUTPUT%1d", (devc->set_output_enabled) ? 1 : 0);
+		} else {
+			sr_snprintf_ascii(msg, sizeof(msg),
+				"OUT%1d", (devc->set_output_enabled) ? 1 : 0);
+		}
 		/* Set value back to recognize changes */
 		devc->output_enabled = devc->set_output_enabled;
 		break;
@@ -277,7 +286,8 @@ SR_PRIV int korad_kaxxxxp_set_value(struct sr_serial_dev_inst *serial,
 	}
 
 	if (ret == SR_OK && msg[0]) {
-		ret = korad_kaxxxxp_send_cmd(serial, msg, devc->model->quirks & KORAD_QUIRK_NEWLINE);
+		ret = korad_kaxxxxp_send_cmd(serial, msg, devc->model->quirks & KORAD_QUIRK_NEWLINE,
+			devc->model->quirks & KORAD_QUIRK_VELLEMAN);
 		devc->next_req_time = next_req_time(devc, TRUE, target);
 	}
 
@@ -303,26 +313,27 @@ SR_PRIV int korad_kaxxxxp_get_value(struct sr_serial_dev_inst *serial,
 	count = 6;
 
 	bool newline_quirk = devc->model->quirks & KORAD_QUIRK_NEWLINE;
+	bool velleman_quirk = devc->model->quirks & KORAD_QUIRK_VELLEMAN;
 
 	switch (target) {
 	case KAXXXXP_CURRENT:
 		/* Read current from device. */
-		ret = korad_kaxxxxp_send_cmd(serial, "IOUT1?", newline_quirk);
+		ret = korad_kaxxxxp_send_cmd(serial, "IOUT1?", newline_quirk, velleman_quirk);
 		value = &(devc->current);
 		break;
 	case KAXXXXP_CURRENT_LIMIT:
 		/* Read set current from device. */
-		ret = korad_kaxxxxp_send_cmd(serial, "ISET1?", newline_quirk);
+		ret = korad_kaxxxxp_send_cmd(serial, "ISET1?", newline_quirk, velleman_quirk);
 		value = &(devc->current_limit);
 		break;
 	case KAXXXXP_VOLTAGE:
 		/* Read voltage from device. */
-		ret = korad_kaxxxxp_send_cmd(serial, "VOUT1?", newline_quirk);
+		ret = korad_kaxxxxp_send_cmd(serial, "VOUT1?", newline_quirk, velleman_quirk);
 		value = &(devc->voltage);
 		break;
 	case KAXXXXP_VOLTAGE_TARGET:
 		/* Read set voltage from device. */
-		ret = korad_kaxxxxp_send_cmd(serial, "VSET1?", newline_quirk);
+		ret = korad_kaxxxxp_send_cmd(serial, "VSET1?", newline_quirk, velleman_quirk);
 		value = &(devc->voltage_target);
 		break;
 	case KAXXXXP_STATUS:
@@ -330,7 +341,7 @@ SR_PRIV int korad_kaxxxxp_get_value(struct sr_serial_dev_inst *serial,
 	case KAXXXXP_OCP:
 	case KAXXXXP_OVP:
 		/* Read status from device. */
-		ret = korad_kaxxxxp_send_cmd(serial, "STATUS?", newline_quirk);
+		ret = korad_kaxxxxp_send_cmd(serial, "STATUS?", newline_quirk, velleman_quirk);
 		count = 1;
 		if (newline_quirk)
 			count = 2;
diff --git a/src/hardware/korad-kaxxxxp/protocol.h b/src/hardware/korad-kaxxxxp/protocol.h
index 43653d14..4540c831 100644
--- a/src/hardware/korad-kaxxxxp/protocol.h
+++ b/src/hardware/korad-kaxxxxp/protocol.h
@@ -40,7 +40,8 @@ enum korad_quirks_flag {
 	KORAD_QUIRK_ID_OPT_VERSION = 1UL << 3,
 	KORAD_QUIRK_SLOW_PROCESSING = 1UL << 4,
 	KORAD_QUIRK_NEWLINE = 1UL << 5,
-	KORAD_QUIRK_ALL = (1UL << 6) - 1,
+	KORAD_QUIRK_VELLEMAN = 1UL << 6,
+	KORAD_QUIRK_ALL = (1UL << 7) - 1,
 };
 
 /* Information on single model */
@@ -105,7 +106,7 @@ struct dev_context {
 };
 
 SR_PRIV int korad_kaxxxxp_send_cmd(struct sr_serial_dev_inst *serial,
-		const char *cmd, bool add_newline);
+		const char *cmd, bool add_newline, bool velleman_literal);
 SR_PRIV int korad_kaxxxxp_read_chars(struct sr_serial_dev_inst *serial,
 		size_t count, char *buf, bool strip_newline);
 SR_PRIV int korad_kaxxxxp_set_value(struct sr_serial_dev_inst *serial,
